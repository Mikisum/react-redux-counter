{"version":3,"sources":["redux/types.ts","redux/actions.ts","App.tsx","redux/rootReducer.ts","redux/sagas.js","index.tsx"],"names":["INCREMENT","DECREMENT","RESET","FETCH_BACKGROUND","REQUEST_BACKGROUND","REQUEST_BACKGROUND_SUCCESS","REQUEST_BACKGROUND_FAILED","ENABLE_BUTTONS","DISABLE_BUTTONS","increment","type","decrement","reset","dispatch","disableButtons","setTimeout","enableButtons","fetchBackground","requestBackground","requestBackgroundFailed","requestBackgroundSuccess","data","url","connect","state","console","log","counter","counterReducer","disabled","buttonsReducer","backgroundReducer","loading","error","actions","className","style","backgroundImage","id","onClick","initialBackgroundState","rootReducer","combineReducers","action","sagaWatcher","fetchBackgroundAsync","takeEvery","put","call","a","random","Math","ceil","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","document","getElementById"],"mappings":"8nBAAcA,EAAY,YACZC,EAAY,YACZC,EAAQ,QACTC,EAAmB,mBACnBC,EAAqB,qBACrBC,EAA6B,+BAC7BC,EAA4B,4BAC5BC,EAAiB,iBACjBC,EAAkB,kBCNxB,SAASC,IACd,MAAO,CACLC,KAAMV,GAIH,SAASW,IACd,MAAO,CACLD,KAAMT,GAIH,SAASW,IACd,OAAO,SAASC,GACdA,EAASC,KACTC,YAAW,WACTF,EAAS,CAAEH,KAAMR,IACjBW,EAASG,OACR,MAIA,SAASC,IACd,MAAO,CACLP,KAAMP,GAIH,SAASe,IACd,MAAO,CACLR,KAAMN,GAIH,SAASe,IACd,MAAO,CACLT,KAAMJ,GAIH,SAASc,EAAyBC,GACvC,MAAO,CACLX,KAAML,EACNiB,IAAKD,GAIF,SAASL,IACd,MAAO,CACLN,KAAMH,GAIH,SAASO,IACd,MAAO,CACLJ,KAAMF,GCxCV,IAmCee,eAXS,SAACC,GAEvB,OADAC,QAAQC,IAAIF,GACL,CACLG,QAASH,EAAMI,eACfC,SAAUL,EAAMM,eAChBR,IAAKE,EAAMO,kBAAkBT,IAC7BU,QAASR,EAAMO,kBAAkBC,QACjCC,MAAOT,EAAMO,kBAAkBE,SAIKC,EAAzBX,EAnCwB,SAAC,GAA6F,IAA5FI,EAA2F,EAA3FA,QAASE,EAAkF,EAAlFA,SAAUpB,EAAwE,EAAxEA,UAAWE,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,MAAOU,EAA2C,EAA3CA,IAAKL,EAAsC,EAAtCA,gBAAiBe,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAEtH,OACE,sBAAKE,UAAU,MAAf,UACE,qBAAKA,UAAU,KAAKC,MAAO,CAACC,gBAAgB,OAAD,OAAQf,EAAR,QAC3C,sBAAKa,UAAU,UAAf,UACE,qBAAIA,UAAU,QAAd,sBAAgCR,EAAQ,sBAAMW,GAAG,eACjD,sBAAKH,UAAU,gBAAf,UACE,wBAAQN,SAAUA,EAAUU,QAAS9B,EAArC,SAAgD,uCAAUkB,EAAQ,EAAlB,SAChD,wBAAQE,SAAUA,EAAUU,QAAS5B,EAArC,SAAgD,uCAAUgB,EAAQ,EAAlB,SAChD,wBAAQE,SAAUA,EAAUU,QAAS3B,EAArC,SAA4C,+CAC5C,wBACEiB,SAAUA,EAAUU,QAAStB,EAD/B,SAEGe,EACE,sBAAMG,UAAU,YACfF,EACE,yCACD,uD,OCJjB,IAAIO,EAAgD,CAClDlB,IAAK,yCACLU,SAAS,EACTC,OAAO,GA2BF,IAAMQ,EAAcC,YAAgB,CACzCd,eA1DF,WAAiD,IAAzBJ,EAAwB,uDAAhB,EAAGmB,EAAa,uCAC9C,OAAGA,EAAOjC,OAASV,EACVwB,EAAQ,EACNmB,EAAOjC,OAAST,EAClBuB,EAAQ,EACPmB,EAAOjC,OAASR,EACT,EAEVsB,GAmDPM,eAhDF,WAAqD,IAA7BN,EAA4B,wDAAbmB,EAAa,uCAClD,OAAQA,EAAOjC,MACb,KAAKH,EACH,OAAc,EAChB,KAAKC,EACH,OAAa,EACf,QAAS,OAAOgB,IA2ClBO,kBA3BF,WAAgG,IAArEP,EAAoE,uDAA5DgB,EAAwBG,EAAoC,uCAC7F,OAAOA,EAAOjC,MACZ,KAAKN,EACH,MAAO,CACGkB,IAAK,GACLU,SAAS,EACTC,OAAO,GAEnB,KAAK5B,EACH,MAAO,CACGiB,IAAKqB,EAAOrB,IACZU,SAAS,EACTC,OAAO,GAEnB,KAAK3B,EACH,MAAQ,CACEgB,IAAK,GACLU,SAAS,EACTC,OAAO,GAEnB,QAAS,OAAOT,M,0DCnDHoB,G,WAIPC,GAJH,SAAUD,IAAV,iEACL,OADK,SACCE,YAAU3C,EAAkB0C,GAD7B,uCAIP,SAAUA,IAAV,uEAEI,OAFJ,kBAEUE,YAAI7B,KAFd,OAGiB,OAHjB,SAGuB8B,YAAK/B,GAH5B,OAII,OADMI,EAHV,gBAIU0B,YAAI3B,EAAyBC,IAJvC,+BAMI,OANJ,oCAMU0B,YAAI5B,GANd,sD,SAUeF,I,2EAAf,kCAAAgC,EAAA,6DACMC,EAASC,KAAKC,KAAmB,IAAdD,KAAKD,UACtB5B,EAFR,sDAE6D4B,GAF7D,SAGyBG,MAAM/B,GAH/B,cAGQgC,EAHR,gBAIqBA,EAASC,OAJ9B,cAIQA,EAJR,yBAKSA,EAAKjC,KALd,4C,sBCTA,IAAMkC,EAAOC,cAEPC,EAAQC,YACZlB,EACAmB,YACEC,YAAgBC,IAAON,GAEvBO,OAAOC,8BAAgCD,OAAOC,iCAGlDR,EAAKS,IAAIrB,GAETsB,IAASC,OACP,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFU,SAASC,eAAe,W","file":"static/js/main.ddea111f.chunk.js","sourcesContent":["export  const INCREMENT = 'INCREMENT';\r\nexport  const DECREMENT = 'DECREMENT';\r\nexport  const RESET = 'RESET';\r\nexport const FETCH_BACKGROUND = 'FETCH_BACKGROUND';\r\nexport const REQUEST_BACKGROUND = 'REQUEST_BACKGROUND';\r\nexport const REQUEST_BACKGROUND_SUCCESS = 'REQUEST_BACKGROUND_SUCCEEDED';\r\nexport const REQUEST_BACKGROUND_FAILED = 'REQUEST_BACKGROUND_FAILED';\r\nexport const ENABLE_BUTTONS = 'ENABLE_BUTTONS';\r\nexport const DISABLE_BUTTONS = 'DISABLE_BUTTONS';\r\n\r\n\r\n","import { REQUEST_BACKGROUND, DECREMENT, DISABLE_BUTTONS, ENABLE_BUTTONS,  INCREMENT, RESET, REQUEST_BACKGROUND_SUCCESS, REQUEST_BACKGROUND_FAILED, FETCH_BACKGROUND } from \"./types\"\r\n\r\nexport function increment() {\r\n  return {\r\n    type: INCREMENT\r\n  }\r\n}\r\n\r\nexport function decrement() {\r\n  return {\r\n    type: DECREMENT\r\n  }\r\n}\r\n\r\nexport function reset() {\r\n  return function(dispatch: any) {\r\n    dispatch(disableButtons())\r\n    setTimeout(() => {\r\n      dispatch({ type: RESET })\r\n      dispatch(enableButtons())\r\n    }, 1000)\r\n  }\r\n}\r\n\r\nexport function fetchBackground() {\r\n  return {\r\n    type: FETCH_BACKGROUND\r\n  }\r\n}\r\n\r\nexport function requestBackground() {\r\n  return {\r\n    type: REQUEST_BACKGROUND\r\n  }\r\n}\r\n\r\nexport function requestBackgroundFailed() {\r\n  return {\r\n    type: REQUEST_BACKGROUND_FAILED\r\n  }\r\n}\r\n\r\nexport function requestBackgroundSuccess(data: string) {\r\n  return {\r\n    type: REQUEST_BACKGROUND_SUCCESS,\r\n    url: data\r\n  }\r\n}\r\n\r\nexport function enableButtons(){\r\n  return {\r\n    type: ENABLE_BUTTONS\r\n  }\r\n}\r\n\r\nexport function disableButtons() {\r\n  return {\r\n    type: DISABLE_BUTTONS\r\n  }\r\n}","import './app.css';\nimport { connect } from 'react-redux';\nimport * as actions from './redux/actions';\nimport { AppStateType } from './redux/rootReducer';\n\ntype MapStatePropsType = {\n  counter: number\n  disabled: boolean\n  increment: () => void\n  decrement: () => void\n  reset: () => void\n  url: string\n  fetchBackground: () => void\n  loading: boolean\n  error: boolean\n}\n\nlet App: React.FC<MapStatePropsType> = ({counter, disabled, increment, decrement, reset, url, fetchBackground, loading, error }) => {\n\n  return (\n    <div className=\"App\">\n      <div className='bg' style={{backgroundImage:`url(${url})`}}></div>  \n      <div className='content'>\n        <h2 className='title'>counter: {counter}<span id='counter'></span></h2>\n        <div className='group-buttons'>\n          <button disabled={disabled} onClick={increment}><span>+ ({counter+1})</span></button>\n          <button disabled={disabled} onClick={decrement}><span>- ({counter-1})</span></button>\n          <button disabled={disabled} onClick={reset}><span>reset (0)</span></button>\n          <button \n            disabled={disabled} onClick={fetchBackground}>\n            {loading \n              ?<span className=\"loading\"></span>\n              : error\n                ? <span>Error</span>\n                :<span>theme</span>} \n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\nconst mapStateToProps = (state: AppStateType) => {\n  console.log(state)\n  return {\n    counter: state.counterReducer,\n    disabled: state.buttonsReducer,\n    url: state.backgroundReducer.url,\n    loading: state.backgroundReducer.loading,\n    error: state.backgroundReducer.error\n  }\n};\n\nexport default connect(mapStateToProps, actions)(App);\n","import {combineReducers} from 'redux';\r\nimport { REQUEST_BACKGROUND, DECREMENT, DISABLE_BUTTONS, ENABLE_BUTTONS, INCREMENT, RESET, REQUEST_BACKGROUND_SUCCESS, REQUEST_BACKGROUND_FAILED } from \"./types\"\r\n\r\nfunction counterReducer(state = 0, action: any) {\r\n  if(action.type === INCREMENT){\r\n    return state + 1\r\n  } else if (action.type === DECREMENT){\r\n    return state - 1\r\n  } else if(action.type === RESET) {\r\n    return state = 0\r\n  }\r\n  return state\r\n}\r\n\r\nfunction buttonsReducer(state = false, action: any) {\r\n  switch (action.type) {\r\n    case ENABLE_BUTTONS: \r\n      return state= false;\r\n    case DISABLE_BUTTONS: \r\n      return state=true  \r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport type InitialBackgroundType = {\r\n  url: string,\r\n  loading: boolean,\r\n  error: boolean\r\n}\r\n\r\nlet initialBackgroundState: InitialBackgroundType = {\r\n  url: 'https://via.placeholder.com/600/a19891',\r\n  loading: false,\r\n  error: false\r\n}\r\n\r\nfunction backgroundReducer(state = initialBackgroundState, action: any): InitialBackgroundType {\r\n  switch(action.type){\r\n    case REQUEST_BACKGROUND:\r\n      return { \r\n                url: '',\r\n                loading: true,\r\n                error: false,\r\n              };\r\n    case REQUEST_BACKGROUND_SUCCESS:\r\n      return { \r\n                url: action.url,\r\n                loading: false,\r\n                error: false\r\n              };\r\n    case REQUEST_BACKGROUND_FAILED:\r\n      return  { \r\n                url: '',\r\n                loading: false,\r\n                error: true\r\n              };\r\n    default: return state;      \r\n  }\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  counterReducer,\r\n  buttonsReducer,\r\n  backgroundReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n","import { put, takeEvery, call} from 'redux-saga/effects';\r\nimport { requestBackground, requestBackgroundFailed, requestBackgroundSuccess} from './actions';\r\nimport { FETCH_BACKGROUND, RESET } from \"./types\";\r\n\r\n\r\nexport function* sagaWatcher() {\r\n  yield takeEvery(FETCH_BACKGROUND, fetchBackgroundAsync)\r\n}\r\n\r\nfunction* fetchBackgroundAsync() {\r\n  try{\r\n    yield put(requestBackground());\r\n    const data = yield call(fetchBackground);\r\n    yield put(requestBackgroundSuccess(data));\r\n  } catch(error) {\r\n    yield put(requestBackgroundFailed)\r\n  }\r\n}\r\n\r\nasync function fetchBackground() {\r\n  let random = Math.ceil(Math.random()*100);\r\n  const url = `https://jsonplaceholder.typicode.com/photos/${random}`\r\n  const response = await fetch(url) \r\n  const json = await response.json()\r\n  return json.url\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './redux/rootReducer';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport {sagaWatcher} from './redux/sagas';\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk, saga),\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n)\nsaga.run(sagaWatcher);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}